import{_ as e,c as a,o as l,ag as i}from"./chunks/framework.Dfa2T_mi.js";const u=JSON.parse('{"title":"留言板软件开发设计文档","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"project-coach/message-board-design.md","filePath":"project-coach/message-board-design.md","lastUpdated":1746254982000}'),s={name:"project-coach/message-board-design.md"};function r(t,o,n,d,c,g){return l(),a("div",null,o[0]||(o[0]=[i('<h1 id="留言板软件开发设计文档" tabindex="-1">留言板软件开发设计文档 <a class="header-anchor" href="#留言板软件开发设计文档" aria-label="Permalink to &quot;留言板软件开发设计文档&quot;">​</a></h1><h2 id="一、引言" tabindex="-1">一、引言 <a class="header-anchor" href="#一、引言" aria-label="Permalink to &quot;一、引言&quot;">​</a></h2><h3 id="一-目的" tabindex="-1">（一）目的 <a class="header-anchor" href="#一-目的" aria-label="Permalink to &quot;（一）目的&quot;">​</a></h3><p>本文档旨在明确留言板软件的设计方案，为开发团队提供详细的功能设计、技术选型、数据库设计及接口设计等指导，确保软件能够满足用户注册登录、发布留言、评论回复等功能需求，同时保证软件的性能、安全性和兼容性。</p><h3 id="二-范围" tabindex="-1">（二）范围 <a class="header-anchor" href="#二-范围" aria-label="Permalink to &quot;（二）范围&quot;">​</a></h3><p>本设计文档涵盖留言板软件从需求分析到系统设计的全过程，包括用户模块、留言模块、评论回复模块的功能设计，数据库表结构设计，以及前后端交互接口设计等内容。</p><h2 id="二、总体设计" tabindex="-1">二、总体设计 <a class="header-anchor" href="#二、总体设计" aria-label="Permalink to &quot;二、总体设计&quot;">​</a></h2><h3 id="一-系统架构" tabindex="-1">（一）系统架构 <a class="header-anchor" href="#一-系统架构" aria-label="Permalink to &quot;（一）系统架构&quot;">​</a></h3><p>采用前后端分离架构，前端负责用户界面展示和交互，后端提供数据处理和业务逻辑支持，通过 API 接口进行数据交互。这种架构便于开发、维护和扩展，提高系统的可维护性和可扩展性。</p><h3 id="二-技术选型" tabindex="-1">（二）技术选型 <a class="header-anchor" href="#二-技术选型" aria-label="Permalink to &quot;（二）技术选型&quot;">​</a></h3><ol><li><strong>前端技术</strong>：使用 HTML5、CSS3、JavaScript 进行页面开发，搭配 Vue.js 框架实现页面的动态交互和数据绑定，采用 Axios 库进行 HTTP 请求，实现前后端数据通信。</li><li><strong>后端技术</strong>：选择 Node.js 作为后端开发语言，搭配 Express 框架搭建 Web 服务器，处理用户请求和业务逻辑。使用 MySQL 作为数据库管理系统，存储用户信息、留言、评论和回复数据。</li><li><strong>其他工具</strong>：使用 NPM（Node Package Manager）进行项目依赖管理，Git 进行版本控制，Postman 进行接口测试。</li></ol><h2 id="三、功能设计" tabindex="-1">三、功能设计 <a class="header-anchor" href="#三、功能设计" aria-label="Permalink to &quot;三、功能设计&quot;">​</a></h2><h3 id="一-用户模块" tabindex="-1">（一）用户模块 <a class="header-anchor" href="#一-用户模块" aria-label="Permalink to &quot;（一）用户模块&quot;">​</a></h3><ol><li><strong>注册功能</strong><ul><li>前端设计：提供注册表单，包含用户名、密码、邮箱输入框及注册按钮。对输入内容进行格式验证，如用户名长度限制、密码复杂度验证、邮箱格式验证等。</li><li>后端设计：接收前端发送的注册请求，验证用户名是否唯一，若唯一则对密码进行加密（采用 BCrypt 算法），将用户信息存储到数据库的<code>users</code>表中，并向用户邮箱发送激活邮件。</li></ul></li><li><strong>登录功能</strong><ul><li>前端设计：展示登录表单，包括用户名和密码输入框、登录按钮。提交登录请求时，对输入信息进行基本验证。</li><li>后端设计：接收登录请求，从数据库中查询用户信息，验证用户名和密码是否匹配。若匹配成功，生成 JWT 令牌并返回给前端；若失败，返回错误提示信息。</li></ul></li></ol><h3 id="二-留言模块" tabindex="-1">（二）留言模块 <a class="header-anchor" href="#二-留言模块" aria-label="Permalink to &quot;（二）留言模块&quot;">​</a></h3><ol><li><strong>发布留言</strong><ul><li>前端设计：在留言板首页提供“发布留言”按钮，点击后弹出留言编辑框。用户输入留言内容后，点击“提交”按钮发送发布请求。</li><li>后端设计：接收发布留言请求，验证用户登录状态，将留言信息（包含用户 ID、留言内容、发布时间）插入到数据库的<code>messages</code>表中，返回成功响应。</li></ul></li><li><strong>留言展示</strong><ul><li>前端设计：从后端获取留言数据，按照时间倒序在留言板首页展示每条留言的用户名、留言内容、发布时间。</li><li>后端设计：从<code>messages</code>表中查询所有留言信息，按照发布时间降序排列，返回给前端。</li></ul></li></ol><h3 id="三-评论回复模块" tabindex="-1">（三）评论回复模块 <a class="header-anchor" href="#三-评论回复模块" aria-label="Permalink to &quot;（三）评论回复模块&quot;">​</a></h3><ol><li><strong>评论留言</strong><ul><li>前端设计：在每条留言下方提供“评论”按钮，点击后弹出评论输入框。用户输入评论内容后，点击“提交”按钮发送评论请求。</li><li>后端设计：接收评论请求，验证用户登录状态，将评论信息（包含评论用户 ID、被评论留言 ID、评论内容、评论时间）插入到数据库的<code>comments</code>表中，返回成功响应。</li></ul></li><li><strong>回复评论</strong><ul><li>前端设计：在每条评论下方提供“回复”按钮，点击后弹出回复输入框。用户输入回复内容后，点击“提交”按钮发送回复请求。</li><li>后端设计：接收回复请求，验证用户登录状态，将回复信息（包含回复用户 ID、被回复评论 ID、回复内容、回复时间）插入到数据库的<code>replies</code>表中，返回成功响应。</li></ul></li><li><strong>删除评论</strong><ul><li>前端设计：在用户自己发布的评论旁边显示“删除”按钮，点击后弹出确认删除提示框，用户确认后发送删除请求。</li><li>后端设计：接收删除评论请求，验证评论发布者与当前登录用户是否一致，若一致则删除该评论及其所有相关回复（从<code>comments</code>表和<code>replies</code>表中删除相关数据），返回成功响应。</li></ul></li></ol><h2 id="四、数据库设计" tabindex="-1">四、数据库设计 <a class="header-anchor" href="#四、数据库设计" aria-label="Permalink to &quot;四、数据库设计&quot;">​</a></h2><h3 id="一-表结构" tabindex="-1">（一）表结构 <a class="header-anchor" href="#一-表结构" aria-label="Permalink to &quot;（一）表结构&quot;">​</a></h3><ol><li><strong>用户表（users）</strong>：包含用户 ID、用户名、密码、邮箱、是否激活字段，用于存储用户注册登录信息。</li><li><strong>留言表（messages）</strong>：包含留言 ID、用户 ID、留言内容、发布时间字段，用于存储用户发布的留言信息。</li><li><strong>评论表（comments）</strong>：包含评论 ID、用户 ID、留言 ID、评论内容、评论时间字段，用于存储对留言的评论信息。</li><li><strong>回复表（replies）</strong>：包含回复 ID、用户 ID、评论 ID、回复内容、回复时间字段，用于存储对评论的回复信息。</li></ol><h3 id="二-表间关系" tabindex="-1">（二）表间关系 <a class="header-anchor" href="#二-表间关系" aria-label="Permalink to &quot;（二）表间关系&quot;">​</a></h3><ol><li>用户表与留言表、评论表、回复表通过用户 ID 建立一对多关系。</li><li>留言表与评论表通过留言 ID 建立一对多关系。</li><li>评论表与回复表通过评论 ID 建立一对多关系。</li></ol><h2 id="五、接口设计" tabindex="-1">五、接口设计 <a class="header-anchor" href="#五、接口设计" aria-label="Permalink to &quot;五、接口设计&quot;">​</a></h2><h3 id="一-用户模块接口" tabindex="-1">（一）用户模块接口 <a class="header-anchor" href="#一-用户模块接口" aria-label="Permalink to &quot;（一）用户模块接口&quot;">​</a></h3><ol><li><strong>注册接口</strong><ul><li><strong>接口地址</strong>：<code>/api/register</code></li><li><strong>请求方法</strong>：<code>POST</code></li><li><strong>请求参数</strong>：<code>{ username: string, password: string, email: string }</code></li><li><strong>响应参数</strong>：<code>{ success: boolean, message: string }</code></li></ul></li><li><strong>登录接口</strong><ul><li><strong>接口地址</strong>：<code>/api/login</code></li><li><strong>请求方法</strong>：<code>POST</code></li><li><strong>请求参数</strong>：<code>{ username: string, password: string }</code></li><li><strong>响应参数</strong>：<code>{ success: boolean, message: string, token: string }</code></li></ul></li></ol><h3 id="二-留言模块接口" tabindex="-1">（二）留言模块接口 <a class="header-anchor" href="#二-留言模块接口" aria-label="Permalink to &quot;（二）留言模块接口&quot;">​</a></h3><ol><li><strong>发布留言接口</strong><ul><li><strong>接口地址</strong>：<code>/api/messages</code></li><li><strong>请求方法</strong>：<code>POST</code></li><li><strong>请求参数</strong>：<code>{ message_content: string }</code></li><li><strong>响应参数</strong>：<code>{ success: boolean, message: string }</code></li></ul></li><li><strong>获取留言列表接口</strong><ul><li><strong>接口地址</strong>：<code>/api/messages</code></li><li><strong>请求方法</strong>：<code>GET</code></li><li><strong>响应参数</strong>：<code>{ success: boolean, message: string, data: [ { message_id: int, user_id: int, message_content: string, publish_time: datetime } ] }</code></li></ul></li></ol><h3 id="三-评论回复模块接口" tabindex="-1">（三）评论回复模块接口 <a class="header-anchor" href="#三-评论回复模块接口" aria-label="Permalink to &quot;（三）评论回复模块接口&quot;">​</a></h3><ol><li><strong>评论留言接口</strong><ul><li><strong>接口地址</strong>：<code>/api/comments</code></li><li><strong>请求方法</strong>：<code>POST</code></li><li><strong>请求参数</strong>：<code>{ message_id: int, comment_content: string }</code></li><li><strong>响应参数</strong>：<code>{ success: boolean, message: string }</code></li></ul></li><li><strong>回复评论接口</strong><ul><li><strong>接口地址</strong>：<code>/api/replies</code></li><li><strong>请求方法</strong>：<code>POST</code></li><li><strong>请求参数</strong>：<code>{ comment_id: int, reply_content: string }</code></li><li><strong>响应参数</strong>：<code>{ success: boolean, message: string }</code></li></ul></li><li><strong>删除评论接口</strong><ul><li><strong>接口地址</strong>：<code>/api/comments/{comment_id}</code></li><li><strong>请求方法</strong>：<code>DELETE</code></li><li><strong>响应参数</strong>：<code>{ success: boolean, message: string }</code></li></ul></li></ol><h2 id="六、测试计划" tabindex="-1">六、测试计划 <a class="header-anchor" href="#六、测试计划" aria-label="Permalink to &quot;六、测试计划&quot;">​</a></h2><h3 id="一-测试目标" tabindex="-1">（一）测试目标 <a class="header-anchor" href="#一-测试目标" aria-label="Permalink to &quot;（一）测试目标&quot;">​</a></h3><p>验证留言板软件的各项功能是否正常运行，确保系统的稳定性、性能和安全性。</p><h3 id="二-测试内容" tabindex="-1">（二）测试内容 <a class="header-anchor" href="#二-测试内容" aria-label="Permalink to &quot;（二）测试内容&quot;">​</a></h3><ol><li><strong>功能测试</strong>：对用户注册登录、发布留言、评论回复、删除评论等功能进行全面测试，检查功能是否符合需求。</li><li><strong>性能测试</strong>：模拟多用户并发访问，测试系统在高负载情况下的响应时间、吞吐量等性能指标。</li><li><strong>安全测试</strong>：检查系统是否存在 SQL 注入、XSS 攻击等安全漏洞，验证用户密码加密存储和传输的安全性。</li></ol><h3 id="三-测试方法" tabindex="-1">（三）测试方法 <a class="header-anchor" href="#三-测试方法" aria-label="Permalink to &quot;（三）测试方法&quot;">​</a></h3><p>采用黑盒测试方法，使用 Postman 进行接口测试，使用浏览器进行页面功能测试，使用 JMeter 进行性能测试。</p>',37)]))}const m=e(s,[["render",r]]);export{u as __pageData,m as default};

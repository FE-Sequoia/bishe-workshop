import{_ as n,c as s,o,ag as r}from"./chunks/framework.Dfa2T_mi.js";const c=JSON.parse('{"title":"避坑指南","description":"","frontmatter":{},"headers":[],"relativePath":"graduation-project/trap.md","filePath":"graduation-project/trap.md","lastUpdated":1746269787000}'),a={name:"graduation-project/trap.md"};function i(t,l,e,g,p,u){return o(),s("div",null,l[0]||(l[0]=[r(`<h1 id="避坑指南" tabindex="-1">避坑指南 <a class="header-anchor" href="#避坑指南" aria-label="Permalink to &quot;避坑指南&quot;">​</a></h1><h2 id="一、选题-别贪大求全-先确认可行性" tabindex="-1"><strong>一、选题：别贪大求全，先确认可行性</strong> <a class="header-anchor" href="#一、选题-别贪大求全-先确认可行性" aria-label="Permalink to &quot;**一、选题：别贪大求全，先确认可行性**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>避免选题过于宽泛（如“基于AI的万能教育系统”）或技术难度远超自身能力（如“区块链+大数据实时分析平台”）。</li><li>警惕“假需求”：比如盲目跟风热点技术（大模型、区块链），却无实际应用场景。</li></ul><p><strong>建议</strong>：</p><ul><li>选题前先问自己：“我能用现有知识/3个月内学会的技术实现核心功能吗？”</li><li>示例：把“智能医疗诊断系统”细化为“基于规则引擎的糖尿病风险评估小程序”，聚焦单一场景。</li></ul><h2 id="二、需求-提前和导师确认-边界-拒绝频繁变更" tabindex="-1"><strong>二、需求：提前和导师确认“边界”，拒绝频繁变更</strong> <a class="header-anchor" href="#二、需求-提前和导师确认-边界-拒绝频繁变更" aria-label="Permalink to &quot;**二、需求：提前和导师确认“边界”，拒绝频繁变更**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>初期不明确需求，开发中反复推翻重做（如用户模块写了一半，突然要求增加权限管理）。</li><li>忽视学校/导师的隐性要求（如必须包含某类技术、必须有实物演示）。</li></ul><p><strong>建议</strong>：</p><ul><li>用 <strong>原型图+功能清单</strong> 和导师确认需求，明确“必须做”和“可选做”的部分（例：“用户注册登录”为必做，“第三方登录”为选做）。</li><li>遇到需求变更时，优先评估对工期的影响，必要时删减非核心功能。</li></ul><h2 id="三、时间管理-拆分任务-拒绝-deadline冲刺" tabindex="-1"><strong>三、时间管理：拆分任务，拒绝“Deadline冲刺”</strong> <a class="header-anchor" href="#三、时间管理-拆分任务-拒绝-deadline冲刺" aria-label="Permalink to &quot;**三、时间管理：拆分任务，拒绝“Deadline冲刺”**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>前期拖延，最后一个月突击写代码，导致代码混乱、文档缺失。</li><li>低估“写文档”“调Bug”的时间（实际占比可达40%）。</li></ul><p><strong>建议</strong>：</p><ul><li>用 <strong>甘特图/任务清单</strong> 拆分阶段：<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>第1-2周：选题+需求分析  </span></span>
<span class="line"><span>第3-4周：技术调研+原型设计  </span></span>
<span class="line"><span>第5-8周：开发（分模块：用户→核心功能→接口）  </span></span>
<span class="line"><span>第9-10周：测试+文档编写  </span></span>
<span class="line"><span>第11周：修改+答辩准备</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>每周留1天“缓冲时间”，应对突发问题（如环境配置失败、代码报错）。</li></ul><h2 id="四、技术选型-别为-炫技-踩坑-优先选-熟技术" tabindex="-1"><strong>四、技术选型：别为“炫技”踩坑，优先选“熟技术”</strong> <a class="header-anchor" href="#四、技术选型-别为-炫技-踩坑-优先选-熟技术" aria-label="Permalink to &quot;**四、技术选型：别为“炫技”踩坑，优先选“熟技术”**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>为了“高大上”选择从未用过的技术（如用Go写后端却没学过并发模型，用Vue3却不懂响应式原理）。</li><li>忽略兼容性：比如数据库选了PostgreSQL，最后学校服务器只支持MySQL。</li></ul><p><strong>建议</strong>：</p><ul><li>遵循“<strong>70%熟技术+30%可快速上手技术</strong>”原则： <ul><li>后端：学过Python就用Flask/Django，别硬上Spring Boot（除非毕设周期≥6个月）。</li><li>前端：选HTML/CSS/JS原生或JQuery，比强行用React/Vue更稳妥（需额外学框架语法）。</li></ul></li><li>提前确认学校对技术的限制（如必须用Java、必须用MySQL）。</li></ul><h2 id="五、文档-从第一天开始写-别等开发完再补" tabindex="-1"><strong>五、文档：从第一天开始写，别等开发完再补</strong> <a class="header-anchor" href="#五、文档-从第一天开始写-别等开发完再补" aria-label="Permalink to &quot;**五、文档：从第一天开始写，别等开发完再补**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>认为“代码写完再写文档就行”，结果逻辑遗忘、格式混乱，查重率飙升。</li><li>照搬模板，内容空洞（如“可行性分析”写“技术成熟，可行”）。</li></ul><p><strong>建议</strong>：</p><ul><li><strong>同步更新三类文档</strong>： <ol><li><strong>需求文档</strong>：记录功能清单、原型图（用墨刀/Figma画简单页面）。</li><li><strong>设计文档</strong>：数据库ER图（用ProcessOn画）、架构图（分层架构：表现层→业务层→数据层）。</li><li><strong>开发日志</strong>：每天花10分钟记录：“今天完成了用户注册接口，遇到跨域问题，用Flask-CORS解决”。</li></ol></li><li>文档模板从学校官网下载，注意格式要求（字体、行距、页眉页脚）。</li></ul><h2 id="六、代码-从第一天开始写-可维护的代码" tabindex="-1"><strong>六、代码：从第一天开始写“可维护的代码”</strong> <a class="header-anchor" href="#六、代码-从第一天开始写-可维护的代码" aria-label="Permalink to &quot;**六、代码：从第一天开始写“可维护的代码”**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>代码无注释、变量名用拼音（如<code>yonghuming</code>），后期自己都看不懂。</li><li>硬编码（如把数据库密码直接写死在代码里），部署时反复改代码。</li></ul><p><strong>建议</strong>：</p><ul><li>养成三个习惯： <ol><li><strong>模块化</strong>：按功能分文件（<code>user.py</code>/<code>message.py</code>），别全写在一个文件里。</li><li><strong>注释规范</strong>：关键逻辑写注释（例：“# 校验密码复杂度：至少8位，包含字母和数字”）。</li><li><strong>配置分离</strong>：用<code>config.py</code>存放数据库地址、密钥等（例：<code>DB_URI = &quot;mysql://user:pass@localhost/db&quot;</code>）。</li></ol></li><li>用 <strong>Git</strong> 管理代码，每天提交（<code>git commit -m &quot;完成登录接口&quot;</code>），避免代码丢失。</li></ul><h2 id="七、答辩-提前演练-别被-灵魂拷问-打懵" tabindex="-1"><strong>七、答辩：提前演练，别被“灵魂拷问”打懵</strong> <a class="header-anchor" href="#七、答辩-提前演练-别被-灵魂拷问-打懵" aria-label="Permalink to &quot;**七、答辩：提前演练，别被“灵魂拷问”打懵**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>答辩PPT堆砌技术名词，却讲不清核心功能（如“我用了Spring Cloud微服务架构”，但说不出微服务解决了什么问题）。</li><li>对导师提问毫无准备（如“你的系统如何保证数据安全？”，答“没考虑过”）。</li></ul><p><strong>建议</strong>：</p><ul><li><strong>PPT聚焦三部分</strong>： <ol><li><strong>做了什么</strong>：用1张图讲清系统功能（例：用户注册→发布留言→评论回复）。</li><li><strong>怎么做的</strong>：重点讲遇到的难点及解决方案（例：“分表查询时用UNION ALL合并结果，避免笛卡尔积”）。</li><li><strong>成果展示</strong>：贴页面截图、功能演示视频链接（提前录好操作视频，防止现场部署失败）。</li></ol></li><li><strong>准备常见问题</strong>： <ul><li>“你的系统和现有产品比有什么创新？”（答：“针对学生场景简化流程，比如无需复杂注册”）</li><li>“如果用户量增加，你的系统如何优化？”（答：“计划增加索引、用Redis缓存热点数据”）</li></ul></li></ul><h2 id="八、查重-警惕-模板抄袭-代码也会查重" tabindex="-1"><strong>八、查重：警惕“模板抄袭”，代码也会查重</strong> <a class="header-anchor" href="#八、查重-警惕-模板抄袭-代码也会查重" aria-label="Permalink to &quot;**八、查重：警惕“模板抄袭”，代码也会查重**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>直接复制网上的文档模板，导致查重率超标。</li><li>代码照搬开源项目（如直接复制某插件的完整代码）。</li></ul><p><strong>建议</strong>：</p><ul><li><strong>文档查重</strong>： <ol><li>用自己的话重写“研究背景”“技术原理”（例：把“随着互联网发展”改为“在教育数字化趋势下”）。</li><li>图表自己画（用ProcessOn画流程图，别直接截图）。</li></ol></li><li><strong>代码查重</strong>： <ol><li>核心代码自己写（如用户注册逻辑，别直接复制教程代码）。</li><li>引用开源代码时注明来源，并做修改（例：在注释里写“参考XXX项目，调整了错误处理逻辑”）。</li></ol></li></ul><h2 id="九、沟通-每周主动找导师-别等-被催" tabindex="-1"><strong>九、沟通：每周主动找导师，别等“被催”</strong> <a class="header-anchor" href="#九、沟通-每周主动找导师-别等-被催" aria-label="Permalink to &quot;**九、沟通：每周主动找导师，别等“被催”**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>闷头开发2个月，结果导师说“这个方向不对，重做”，前功尽弃。</li><li>遇到技术问题不敢问，硬扛一周导致进度滞后。</li></ul><p><strong>建议</strong>：</p><ul><li><strong>固定沟通频率</strong>：每周发一次进展报告（例：“本周完成数据库设计，下一步计划开发用户模块，是否需要调整？”）。</li><li><strong>带着方案问问题</strong>：遇到技术难点时，先查资料、想2-3种解决方案，再问导师“我想了A和B方案，哪个更合适？”。</li></ul><h2 id="十、演示-提前部署-别在答辩现场-翻车" tabindex="-1"><strong>十、演示：提前部署，别在答辩现场“翻车”</strong> <a class="header-anchor" href="#十、演示-提前部署-别在答辩现场-翻车" aria-label="Permalink to &quot;**十、演示：提前部署，别在答辩现场“翻车”**&quot;">​</a></h2><p><strong>避坑点</strong>：</p><ul><li>答辩时系统无法运行（如数据库连接失败、端口被占用）。</li><li>演示时操作卡顿（如页面加载慢、功能按钮无响应）。</li></ul><p><strong>建议</strong>：</p><ul><li><strong>提前3天完成部署</strong>： <ol><li>在答辩电脑上测试（用U盘拷代码，提前安装依赖）。</li><li>准备“应急方案”：如果系统崩了，至少能展示静态页面截图+流程图。</li></ol></li><li><strong>演示时聚焦核心功能</strong>：按“用户注册→发布留言→评论回复→删除评论”的流程演示，别碰未测试的边缘功能（如批量删除、异常输入）。</li></ul><h2 id="总结-毕设核心原则" tabindex="-1"><strong>总结：毕设核心原则</strong> <a class="header-anchor" href="#总结-毕设核心原则" aria-label="Permalink to &quot;**总结：毕设核心原则**&quot;">​</a></h2><ul><li><strong>务实第一</strong>：毕设的目标是“完整实现一个可运行的系统+规范的文档”，而非“做出革命性产品”。</li><li><strong>留痕意识</strong>：所有沟通记录（和导师的微信聊天、会议纪要）、开发过程（代码提交记录、调试日志）都保存好，关键时刻能救急。</li></ul>`,53)]))}const h=n(a,[["render",i]]);export{c as __pageData,h as default};
